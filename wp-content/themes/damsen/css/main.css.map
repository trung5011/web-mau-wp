{"version":3,"file":"main.css","sources":["main.sass","../../bower_components/k-sass-core/dist/sass/k-sass-core.sass","../../bower_components/k-sass-core/dist/sass/k-sass-core-only.sass","../../bower_components/k-sass-core/dist/sass/core/core-main.sass","../../bower_components/k-sass-core/dist/sass/core/function/_vendors.sass","../../bower_components/k-sass-core/dist/sass/core/function/_isset.sass","../../bower_components/k-sass-core/dist/sass/core/function/_complex.sass","../../bower_components/k-sass-core/dist/sass/core/function/_array.sass","../../bower_components/k-sass-core/dist/sass/core/function/_helper.sass","../../bower_components/k-sass-core/dist/sass/core/function/_length.sass","../../bower_components/k-sass-core/dist/sass/core/function/_number.sass","../../bower_components/k-sass-core/dist/sass/core/function/_replace.sass","../../bower_components/k-sass-core/dist/sass/core/function/_size.sass","../../bower_components/k-sass-core/dist/sass/core/function/_return.sass","../../bower_components/k-sass-core/dist/sass/core/function/_exist.sass","../../bower_components/k-sass-core/dist/sass/core/function/_colors.sass","../../bower_components/k-sass-core/dist/sass/core/function/_input.sass","../../bower_components/k-sass-core/dist/sass/core/function/_rem.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_prefix.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_basic.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_border.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_border-radius.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_position.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_typography.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_filter.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_animation.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_flex.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_arrow.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_image.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_before-after.sass","../../bower_components/k-sass-core/dist/sass/core/mixin/_text-shadow.sass","../../bower_components/k-sass-core/dist/sass/core/bn-core/_margin_padding.sass","../../bower_components/k-sass-core/dist/sass/core/bn-core/_border.sass","../../bower_components/k-sass-core/dist/sass/core/bn-core/_border-radius.sass","../../bower_components/k-sass-core/dist/sass/core/bn-core/_position.sass","../../bower_components/k-sass-core/dist/sass/core/variables/_variables.sass","_common/_colors.sass","_common/_global.sass","_common/_print.sass","_common/_custom.sass","_partials/_header.sass","_partials/_footer.sass","_pages/index.sass"],"sourcesContent":["@import \"../../bower_components/k-sass-core/dist/sass/k-sass-core\";\n\n////////////////////////////////////////\n// CORE KHÔNG NÊN TÁC ĐỘNG /////////////\n////////////////////////////////////////\n// Khai báo các giá trị cho site\n@import \"_common/colors\";\n@import \"_common/global\";\n@import \"_common/print\";\n@import \"_common/custom\";\n////////////////////////////////////////\n@import \"_partials/header\";\n@import \"_partials/footer\";\n// STYLES //////////////////////////////\n// Các trang\n@import \"_pages/index\";\n////////////////////////////////////////\n","\n// BN-SASS-CORE v6.0.3\n// BN-SASS-CORE is just a library.\n// BN-SASS-CORE requires NODE-SASS. If your OS is older, this version may not compile.\n// http://baonguyenyam.github.io\n// Copyright 2016 by Bao Nguyen.\n// MIT License\n\n// Import Lib\n@import \"k-sass-core-only\";\n","\n// BN-SASS-CORE v6.0.3\n// BN-SASS-CORE is just a library.\n// BN-SASS-CORE requires NODE-SASS. If your OS is older, this version may not compile.\n// http://baonguyenyam.github.io\n// Copyright 2016 by Bao Nguyen.\n// MIT License\n\n// Import Lib\n@import \"core/core-main\";\n","// FUNCTION\n@import \"function/vendors\";\n@import \"function/isset\";\n@import \"function/complex\";\n@import \"function/array\";\n@import \"function/helper\";\n@import \"function/length\";\n@import \"function/number\";\n@import \"function/replace\";\n@import \"function/size\";\n@import \"function/return\";\n@import \"function/exist\";\n@import \"function/colors\";\n@import \"function/input\";\n@import \"function/rem\";\n\n// MIXIN\n@import \"mixin/prefix\";\n@import \"mixin/basic\";\n@import \"mixin/border\";\n@import \"mixin/border-radius\";\n@import \"mixin/position\";\n@import \"mixin/typography\";\n@import \"mixin/filter\";\n@import \"mixin/animation\";\n@import \"mixin/flex\";\n@import \"mixin/arrow\";\n@import \"mixin/image\";\n@import \"mixin/before-after\";\n@import \"mixin/text-shadow\";\n\n// ADD CORE\n@import \"bn-core/margin_padding\";\n@import \"bn-core/border\";\n@import \"bn-core/border-radius\";\n@import \"bn-core/position\";\n\n// VARIABLES\n@import \"variables/variables\";\n\n","// Check vendors\n@mixin vendors($property, $params) {\n\t$vendors: 'webkit khtml moz ms o';\n\t@each $vendor in $vendors {\n\t\t-#{$vendor}-#{$property}: $params; } }\n","// Check isset\n@function isset($v) {\n  @return $v != none and $v != false; }\n\n@function complex-isset($list, $l: length($list)) {\n  $i: 1;\n\n  @while $i <= $l and isset(nth($list, $i)) {\n    $i: $i + 1; }\n\n  @return $i > $l; }\n","// Check complex\n@function list-rtrim($list, $count: 1) {\n  $r: ();\n  $l: length($list) - $count;\n  $i: 1;\n\n  @while $i <= $l {\n    $r: append($r, nth($list, $i));\n    $i: $i + 1; }\n\n  @return $r; }\n\n@function complex-list($params) {\n  $l: length($params);\n\n  @if $l > 1 and nth($params, $l) == !important {\n    $params: list-rtrim($params);\n    $l: $l - 1; }\n\n  @if $l < 4 {\n    @if $l < 3 {\n      $params: join($params, nth($params, 1)); }\n\n    @if $l > 1 {\n      $params: join($params, nth($params, 2)); }\n    @else {\n      $params: join($params, $params); } }\n\n  @return $params; }\n\n@mixin complex-property($property, $params, $complex-params: false) {\n  @if isset($params) {\n    $l: length($params);\n\n    @if $l == 1 or complex-isset($params) {\n      #{$property}: $params; }\n    @else {\n      @if $l < 4 {\n        $params: if(length($complex-params) >= 4, $complex-params, complex-list($params)); }\n\n      $i: 0;\n\n      @each $side in top, right, bottom, left {\n        $i: $i + 1;\n        $p: nth($params, $i);\n\n        @if isset($p) {\n          #{$property}-#{$side}: $p; } } } } }\n","// Check is Array\n@function check_list($list) {\n  @each $item in $list {\n    @if not $item {\n      @return true; } }\n  @return false; }\n","// Check Helpers\n@function check_contains($list, $values...) {\n  @each $value in $values {\n    @if type-of(index($list, $value)) != \"number\" {\n      @return false; } }\n\n  @return true; }\n","// Check Length\n@function check-length($value) {\n  @return type-of($value) != \"null\" and (str-slice($value + \"\", 1, 4) == \"calc\" or index(auto inherit initial 0, $value) or type-of($value) == \"number\" and not unitless($value)); }\n","// Check Numberic\n@function check_number($value) {\n  @return check_contains(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" 0 1 2 3 4 5 6 7 8 9, $value); }\n","// Replace String\n@function str-replace($string, $search, $replace: \"\") {\n  $index: str-index($string, $search);\n  @if $index {\n    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace); }\n  @return $string; }\n\n@function im-rep($str) {\n  $tmp: str-replace($str, \"_\", \" !important\");\n  @return $tmp; }\n","// Check Size\n@function check_size($value) {\n  @return check-length($value) or _contains(\"fill\" \"fit-content\" \"min-content\" \"max-content\", $value); }\n\n","// Return Array\n@function get_array($values) {\n  $output: null;\n  $a: nth($values, 1);\n  $b: if(length($values) < 2, $a, nth($values, 2));\n  $c: if(length($values) < 3, $a, nth($values, 3));\n  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));\n  @if $a == 0 {\n    $a: im-rep(#{$a}); }\n  @if $b == 0 {\n    $b: im-rep(#{$b}); }\n  @if $c == 0 {\n    $c: im-rep(#{$c}); }\n  @if $d == 0 {\n    $d: im-rep(#{$d}); }\n\n  @if $a == $b and $a == $c and $a == $d {\n    $output: $a; }\n  @else if $a == $c and $b == $d {\n    $output: $a $b; }\n  @else if $b == $d {\n    @if length($values) == 3 {\n      $output: $a $b $c; }\n    @else {\n      $output: $a $b $c $d; } }\n  @else {\n    $output: $a $b $c $d; }\n  @return $output; }\n\n\n\n","// String exist\n@function exist($str) {\n    @if(feature-exists($str)) {\n        @return true; }\n    @else {\n        @return false; } }\n","// Colors\n@function color-get($bn-colors, $co) {\n    $mapcolor: map-get($bn-colors, \"#{$co}\");\n    @if ($mapcolor) {\n        @return $mapcolor; }\n    @else {\n        @return white; } }\n\n@function color($co) {\n    $mapcolor: map-get($bn-colors, \"#{$co}\");\n    @if ($mapcolor) {\n        @return $mapcolor; }\n    @else {\n        @return white; } }\n\n@function color-rgba($co: #fff, $o:1) {\n    @if ($co) {\n        @return rgba(red($co),green($co),blue($co),$o); }\n    @else {\n        @return white; } }\n\n// Set color lighten or darken\n@function color-up($co, $amount:0) {\n    $tmp: lighten($co, $amount);\n    @return $tmp; }\n@function color-down($co, $amount:0) {\n    $tmp: darken($co, $amount);\n    @return $tmp; }\n","// Check input list\n@function bn-inputs($inputs, $pseudo: null) {\n  $list: ();\n  @each $input in $inputs {\n    $input: unquote($input);\n    $input: if($pseudo, $input + \":\" + $pseudo, $input);\n    $list: append($list, $input, comma); }\n  @return $list; }\n","// Check Rem\n@function calculateRem($size) {\n  $remSize: $size / 16px;\n  @return $remSize * 1rem; }\n","// PREFIX PROPERTIES\n@mixin bn-prefix($property: null, $value: null) {\n  -webkit-#{$property}: #{$value};\n  -khtml-#{$property}: #{$value};\n  -moz-#{$property}: #{$value};\n  -ms-#{$property}: #{$value};\n  -o-#{$property}: #{$value};\n  #{$property}: #{$value}; }\n\n@mixin bn-value-prefixer($property,$value,$prefixes:()) {\n  @each $prefix in $prefixes {\n    #{$property}: #{\"-\" + $prefix + \"-\" + $value}; }\n  #{$property}: $value; }\n","// BASIC PROPERTIES\n@mixin bn-property($pre, $suf, $values...) {\n  $top: $pre + \"-top\" + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left: $pre + \"-left\" + if($suf, \"-#{$suf}\", \"\");\n  $right: $pre + \"-right\" + if($suf, \"-#{$suf}\", \"\");\n  $all: $pre + if($suf, \"-#{$suf}\", \"\");\n  $values: get_array($values);\n  @if check_list($values) {\n    @if nth($values, 1) {\n      #{$top}: im-rep(#{nth($values, 1)}); }\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: im-rep(#{nth($values, 1)}); } }\n    @else {\n      @if nth($values, 2) {\n        #{$right}: im-rep(#{nth($values, 2)}); } }\n    @if length($values) == 2 {\n      @if nth($values, 1) {\n        #{$bottom}: im-rep(#{nth($values, 1)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 3 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 4 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 4) {\n        #{$left}: im-rep(#{nth($values, 4)}); } } }\n  @else {\n    @if length($values) == 1 {\n      #{$all}: im-rep(#{$values}); }\n    @else if length($values) == 2 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 1)});\n      #{$left}: im-rep(#{nth($values, 2)}); }\n    @else if length($values) == 3 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)}); }\n    @else if length($values) == 4 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)});\n      #{$left}: im-rep(#{nth($values, 4)}); } } }\n","// BORDER VARIABLES\n@mixin bn-setborder($pre, $suf, $type, $values...) {\n  $top: $pre + \"-top\" + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom\" + if($suf, \"-#{$suf}\", \"\");\n  $left: $pre + \"-left\" + if($suf, \"-#{$suf}\", \"\");\n  $right: $pre + \"-right\" + if($suf, \"-#{$suf}\", \"\");\n  $all: $pre + if($suf, \"-#{$suf}\", \"\");\n  $values: get_array($values);\n  $getborder: solid transparent;\n  @if $type != null {\n    $getborder: str-replace(#{$type}, \"solid\", \"sol\");\n    $getborder: str-replace(#{$getborder}, \"sol\", \"solid\");\n    $getborder: str-replace(#{$getborder}, \"dashed\", \"das\");\n    $getborder: str-replace(#{$getborder}, \"das\", \"dashed\");\n    $getborder: str-replace(#{$getborder}, \"dotted\", \"dot\");\n    $getborder: str-replace(#{$getborder}, \"dot\", \"dotted\");\n    $getborder: str-replace(#{$getborder}, \"double\", \"dou\");\n    $getborder: str-replace(#{$getborder}, \"dou\", \"double\");\n    $getborder: str-replace(#{$getborder}, \"none\", \"non\");\n    $getborder: str-replace(#{$getborder}, \"non\", \"none\"); }\n  @if length($values) == 1 {\n    #{$all}: #{$getborder} im-rep(#{$values}); }\n  @else if length($values) == 2 {\n    #{$pre}-top: #{$getborder} im-rep(#{nth($values, 1)});\n    #{$pre}-right: #{$getborder} im-rep(#{nth($values, 2)});\n    #{$pre}-bottom: #{$getborder} im-rep(#{nth($values, 1)});\n    #{$pre}-left: #{$getborder} im-rep(#{nth($values, 2)}); }\n  @else if length($values) == 3 {\n    #{$pre}-top: #{$getborder} im-rep(#{nth($values, 1)});\n    #{$pre}-right: #{$getborder} im-rep(#{nth($values, 2)});\n    #{$pre}-bottom: #{$getborder} im-rep(#{nth($values, 3)}); }\n  @else if length($values) == 4 {\n    #{$pre}-top: #{$getborder} im-rep(#{nth($values, 1)});\n    #{$pre}-right: #{$getborder} im-rep(#{nth($values, 2)});\n    #{$pre}-bottom: #{$getborder} im-rep(#{nth($values, 3)});\n    #{$pre}-left: #{$getborder} im-rep(#{nth($values, 4)}); } }\n","// BASIC PROPERTIES\n@mixin bn-border-radius($pre, $suf, $values...) {\n  $top: $pre + \"-top-left\" + if($suf, \"-#{$suf}\", \"\");\n  $bottom: $pre + \"-bottom-right\" + if($suf, \"-#{$suf}\", \"\");\n  $left: $pre + \"-bottom-left\" + if($suf, \"-#{$suf}\", \"\");\n  $right: $pre + \"-top-right\" + if($suf, \"-#{$suf}\", \"\");\n  $all: $pre + if($suf, \"-#{$suf}\", \"\");\n  $values: get_array($values);\n  @if check_list($values) {\n    @if nth($values, 1) {\n      #{$top}: im-rep(#{nth($values, 1)}); }\n    @if length($values) == 1 {\n      @if nth($values, 1) {\n        #{$right}: im-rep(#{nth($values, 1)}); } }\n    @else {\n      @if nth($values, 2) {\n        #{$right}: im-rep(#{nth($values, 2)}); } }\n    @if length($values) == 2 {\n      @if nth($values, 1) {\n        #{$bottom}: im-rep(#{nth($values, 1)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 3 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 2) {\n        #{$left}: im-rep(#{nth($values, 2)}); } }\n    @else if length($values) == 4 {\n      @if nth($values, 3) {\n        #{$bottom}: im-rep(#{nth($values, 3)}); }\n      @if nth($values, 4) {\n        #{$left}: im-rep(#{nth($values, 4)}); } } }\n  @else {\n    @if length($values) == 1 {\n      #{$all}: im-rep(#{$values}); }\n    @else if length($values) == 2 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 1)});\n      #{$left}: im-rep(#{nth($values, 2)}); }\n    @else if length($values) == 3 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)}); }\n    @else if length($values) == 4 {\n      #{$top}: im-rep(#{nth($values, 1)});\n      #{$right}: im-rep(#{nth($values, 2)});\n      #{$bottom}: im-rep(#{nth($values, 3)});\n      #{$left}: im-rep(#{nth($values, 4)}); } } }\n","// POSITON VARIABLES\n@mixin bn-setposition($pre, $suf, $values...) {\n  $top:  \"top\";\n  $bottom:  \"bottom\";\n  $left:  \"left\";\n  $right:  \"right\";\n  $all:  $pre;\n  $values: get_array($values);\n  $getborder: initial;\n  @if $suf != null {\n    $getborder: str-replace(#{$suf}, \"relative\", \"rel\");\n    $getborder: str-replace(#{$getborder}, \"rel\", \"relative\");\n    $getborder: str-replace(#{$getborder}, \"absolute\", \"abs\");\n    $getborder: str-replace(#{$getborder}, \"abs\", \"absolute\");\n    $getborder: str-replace(#{$getborder}, \"fixed\", \"fix\");\n    $getborder: str-replace(#{$getborder}, \"fix\", \"fixed\");\n    $getborder: str-replace(#{$getborder}, \"static\", \"sta\");\n    $getborder: str-replace(#{$getborder}, \"sta\", \"static\");\n    $getborder: str-replace(#{$getborder}, \"inherit\", \"inh\");\n    $getborder: str-replace(#{$getborder}, \"non\", \"inherit\"); }\n  #{$all}: #{$getborder};\n  @if length($values) == 1 {\n    #{$top}: im-rep(#{$values}); }\n  @else if length($values) == 2 {\n    #{$top}: im-rep(#{nth($values, 1)});\n    #{$right}: im-rep(#{nth($values, 2)}); }\n  @else if length($values) == 3 {\n    #{$top}: im-rep(#{nth($values, 1)});\n    #{$right}: im-rep(#{nth($values, 2)});\n    #{$bottom}: im-rep(#{nth($values, 3)}); }\n  @else if length($values) == 4 {\n    #{$top}: im-rep(#{nth($values, 1)});\n    #{$right}: im-rep(#{nth($values, 2)});\n    #{$bottom}: im-rep(#{nth($values, 3)});\n    #{$left}: im-rep(#{nth($values, 4)}); } }\n\n","// TYPOGRAPHY\n@mixin text-wrap($width: 100%, $display: inline-block) {\n  display: $display;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal; }\n\n// Clearfix\n@mixin clearfix {\n  *zoom: 1;\n  &:before, &:after {\n    content: \" \";\n    display: table; }\n  &:after {\n    clear: both; } }\n// Visually hidden\n@mixin visually-hidden {\n  margin: -1px;\n  padding: 0;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  clip: rect(0, 0, 0, 0);\n  position: absolute; }\n\n// Get Rem\n@mixin setrem($size) {\n  font-size: $size;\n  font-size: calculateRem($size); }\n\n// Fonts\n@mixin font-face($fontFamily: 'myFont', $path: \"../fonts/\", $name: \"myFont\") {\n  @font-face {\n    font-family: '#{$fontFamily}';\n    src: url(#{$path+$name}.eot);\n    src: url(#{$path+$name}.eot?#iefix) format('embedded-opentype'),\n    url(#{$path+$name}.woff) format('woff'),\n    url(#{$path+$name}.woff2) format('woff2'),\n    url(#{$path+$name}.ttf) format('truetype'),\n    url(#{$path+$name}.svg##{$fontFamily}) format('svg') {}\n    font-weight: normal;\n    font-style: normal; } }\n\n// Set Center\n@mixin set-center() {\n  @include transform(translateX(-50%) translateY(-50%));\n  @include pos(abs,50% null null 50%); }\n\n// Set Full Width\n@mixin vh {\n  min-width: 100vw;\n  min-height: 100vh; }\n\n@mixin full-width {\n  min-width: 100%;\n  min-height: 100%;\n  width: 100%;\n  height: 100%; }\n\n\n// Set Padding\n@mixin fz ($fontsize:1rem) {\n  font-size: $fontsize; }\n\n// Set Padding\n@mixin fw ($fontweight:400) {\n  font-weight: $fontweight; }\n\n// Set Padding\n@mixin lh ($lineheight:0) {\n  line-height: $lineheight; }\n\n/// Opacity\n@mixin opacity($opacity: 0.5) {\n  $opacityMultiplied: $opacity * 100;\n  filter: alpha(opacity = $opacityMultiplied);\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + $opacityMultiplied + \")\";\n  @include bn-prefix(\"opacity\", $opacity); }\n\n// Columns\n@mixin columns($count: 3, $gap: 10) {\n  @include bn-prefix(\"column-count\", $count);\n  @include bn-prefix(\"column-gap\", $gap); }\n\n// Text shadow\n@mixin text-shadow($x: 2px 2px 5px rgba(0, 0, 0, 0.4)) {\n  text-shadow: $x; }\n\n// Box shadow\n@mixin box-shadow($x: 2px 2px 5px rgba(0, 0, 0, 0.4), $inset: null) {\n  @if $inset != \"\" {\n    @include bn-prefix(\"box-shadow\", $inset $x ); }\n  @else {\n    @include bn-prefix(\"box-shadow\", $x); } }\n\n@mixin text-sha($x: 2px 2px 5px rgba(0, 0, 0, 0.4)) {\n  text-shadow: $x; }\n\n// Box shadow\n@mixin box-sha($x: 2px 2px 5px rgba(0, 0, 0, 0.4), $inset: null) {\n  @if $inset != \"\" {\n    @include bn-prefix(\"box-shadow\", $inset $x ); }\n  @else {\n    @include bn-prefix(\"box-shadow\", $x); } }\n\n/// Triple Borders\n@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {\n  border: 1px solid $colorOne;\n  @include border-radius($radius);\n  @include bn-prefix(\"box-shadow\", \"0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}\"); }\n\n// Placeholder\n@mixin placeholder {\n  &::-webkit-input-placeholder {\n    @content; }\n  &:-moz-placeholder {\n    @content; }\n  &::-moz-placeholder {\n    @content; }\n  &:-ms-input-placeholder {\n    @content; } }\n\n// Selection\n@mixin selection {\n  &::selection {\n    @content; }\n  &:-moz-selection {\n    @content; }\n  &::-moz-selection {\n    @content; }\n  &:-ms-selection {\n    @content; } }\n","// grayscale      ex: filter: grayscale(100%);\n// sepia          ex: filter: sepia(100%);\n// saturate       ex: filter: saturate(0%);\n// hue-rotate     ex: filter: hue-rotate(45deg);\n// invert         ex: filter: invert(100%);\n// brightness     ex: filter: brightness(15%);\n// contrast       ex: filter: contrast(200%);\n// blur           ex: filter: blur(2px);\n\n@mixin filter($filter-type,$filter-amount) {\n    -webkit-filter: $filter-type+unquote('(#{$filter-amount})');\n    -moz-filter: $filter-type+unquote('(#{$filter-amount})');\n    -ms-filter: $filter-type+unquote('(#{$filter-amount})');\n    -o-filter: $filter-type+unquote('(#{$filter-amount})');\n    filter: $filter-type+unquote('(#{$filter-amount})'); }\n\n@mixin blur($radius) {\n    -webkit-filter: blur($radius+px) /* Chrome, Safari */;\n    -ms-filter: blur($radius+px) /* IE12? */;\n    filter: url(\"data:image/svg+xml;utf8,<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><filter id=\\\"blur\\\"><feGaussianBlur stdDeviation=\\\"#{$radius}\\\" /></filter></svg>#blur\") /* Firefox, Safari, Chrome*/;\n    filter: progid:DXImageTransform.Microsoft.Blur(Strength=#{$radius}) /* IE9 */; }\n","// Animation\n@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {\n  @include bn-prefix(\"transform\", rotate($deg));\n  filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');\n  zoom: 1; }\n\n/// Background Gradient\n@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {\n  background: -moz-linear-gradient(0deg, $startColor 0%, $endColor 100%) /* ff3.6+ */;\n  background: -webkit-gradient(linear, left top, right top, color-stop(0%, $startColor), color-stop(100%, $endColor)) /* safari4+,chrome */;\n  background: -webkit-linear-gradient(0deg, $startColor 0%, $endColor 100%) /* safari5.1+,chrome10+ */;\n  background: -o-linear-gradient(0deg, $startColor 0%, $endColor 100%) /* opera 11.10+ */;\n  background: -ms-linear-gradient(0deg, $startColor 0%, $endColor 100%) /* ie10+ */;\n  background: linear-gradient(90deg, $startColor 0%, $endColor 100%) /* w3c */;\n  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0 ); }\n\n/// Background Horizontal\n@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {\n  background: -moz-linear-gradient(270deg, $startColor 0%, $endColor 100%) /* ff3.6+ */;\n  background: -webkit-gradient(linear, left top, right top, color-stop(0%, $startColor), color-stop(100%, $endColor)) /* safari4+,chrome */;\n  background: -webkit-linear-gradient(270deg, $startColor 0%, $endColor 100%) /* safari5.1+,chrome10+ */;\n  background: -o-linear-gradient(270deg, $startColor 0%, $endColor 100%) /* opera 11.10+ */;\n  background: -ms-linear-gradient(270deg, $startColor 0%, $endColor 100%) /* ie10+ */;\n  background: linear-gradient(180deg, $startColor 0%, $endColor 100%) /* w3c */;\n  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0 ); }\n\n\n/// Background Radial\n@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos: 100%) {\n  background: -moz-radial-gradient(center, ellipse farthest-corner, $startColor $startPos, $endColor $endPos);\n  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos, $startColor), color-stop($endPos, $endColor));\n  background: -webkit-radial-gradient(center, ellipse farthest-corner, $startColor $startPos, $endColor $endPos);\n  background: -o-radial-gradient(center, ellipse farthest-corner, $startColor $startPos, $endColor $endPos);\n  background: -ms-radial-gradient(center, ellipse farthest-corner, $startColor $startPos, $endColor $endPos);\n  background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos); }\n\n// Animation\n@mixin animation($str...) {\n  @include bn-prefix(\"animation\", $str...); }\n\n/// Keyframes\n@mixin keyframes($animation-name) {\n  @-webkit-keyframes #{$animation-name} {\n    @content; }\n  @-moz-keyframes #{$animation-name} {\n    @content; }\n  @-ms-keyframes #{$animation-name} {\n    @content; }\n  @-o-keyframes #{$animation-name} {\n    @content; }\n  @keyframes #{$animation-name} {\n    @content; } }\n\n/// Transform\n@mixin transform($params...) {\n  @include bn-prefix(\"transform\", $params...); }\n\n/// Transform-Origin\n@mixin transform-origin($params...) {\n  @include bn-prefix(\"transform-origin\", $params...); }\n\n// Transform-Style\n@mixin transform-style($style: preserve-3d) {\n  @include bn-prefix(\"transform-style\", $style); }\n\n/// Transition\n@mixin transition($properties...) {\n  @if length($properties) >= 1 {\n    @include bn-prefix(\"transition\", $properties); }\n  @else {\n    @include bn-prefix(\"transition\", \"all 0.2s ease-in-out 0s\"); } }\n\n@mixin delay($time: 1s) {\n  @include bn-prefix(\"animation-delay\", $time); }\n","@mixin flexbox {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-flex;\n  display: -ms-flexbox;\n  display: flex; }\n\n%flexbox {\n  @include flexbox; }\n\n//----------------------------------\n\n@mixin inline-flex {\n  display: -webkit-inline-box;\n  display: -webkit-inline-flex;\n  display: -moz-inline-flex;\n  display: -ms-inline-flexbox;\n  display: inline-flex; }\n\n%inline-flex {\n  @include inline-flex; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Direction\n//\n// The 'flex-direction' property specifies how flex items are placed in\n// the flex container, by setting the direction of the flex container's\n// main axis. This determines the direction that flex items are laid out in.\n//\n// Values: row | row-reverse | column | column-reverse\n// Default: row\n//\n// http://w3.org/tr/css3-flexbox/#flex-direction-property\n\n@mixin flex-direction($value: row) {\n  @if $value == row-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: horizontal; }\n  @else if $value == column {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: vertical; }\n  @else if $value == column-reverse {\n    -webkit-box-direction: reverse;\n    -webkit-box-orient: vertical; }\n  @else {\n    -webkit-box-direction: normal;\n    -webkit-box-orient: horizontal; }\n\n  -webkit-flex-direction: $value;\n  -moz-flex-direction: $value;\n  -ms-flex-direction: $value;\n  flex-direction: $value; }\n\n// Shorter version:\n@mixin flex-dir($args...) {\n  @include flex-direction($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Wrap\n//\n// The 'flex-wrap' property controls whether the flex container is single-line\n// or multi-line, and the direction of the cross-axis, which determines\n// the direction new lines are stacked in.\n//\n// Values: nowrap | wrap | wrap-reverse\n// Default: nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-wrap-property\n\n@mixin flex-wrap($value: nowrap) {\n  // No Webkit Box fallback.\n  -webkit-flex-wrap: $value;\n  -moz-flex-wrap: $value;\n\n  @if $value == nowrap {\n    -ms-flex-wrap: none; }\n  @else {\n    -ms-flex-wrap: $value; }\n\n  flex-wrap: $value; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Flow (shorthand)\n//\n// The 'flex-flow' property is a shorthand for setting the 'flex-direction'\n// and 'flex-wrap' properties, which together define the flex container's\n// main and cross axes.\n//\n// Values: <flex-direction> | <flex-wrap>\n// Default: row nowrap\n//\n// http://w3.org/tr/css3-flexbox/#flex-flow-property\n\n@mixin flex-flow($values: row nowrap) {\n  // No Webkit Box fallback.\n  -webkit-flex-flow: $values;\n  -moz-flex-flow: $values;\n  -ms-flex-flow: $values;\n  flex-flow: $values; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Order\n//\n// The 'order' property controls the order in which flex items appear within\n// their flex container, by assigning them to ordinal groups.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#order-property\n\n@mixin order($int: 0) {\n  -webkit-box-ordinal-group: $int + 1;\n  -webkit-order: $int;\n  -moz-order: $int;\n  -ms-flex-order: $int;\n  order: $int; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Grow\n//\n// The 'flex-grow' property sets the flex grow factor. Negative numbers\n// are invalid.\n//\n// Default: 0\n//\n// http://w3.org/tr/css3-flexbox/#flex-grow-property\n\n@mixin flex-grow($int: 0) {\n  -webkit-box-flex: $int;\n  -webkit-flex-grow: $int;\n  -moz-flex-grow: $int;\n  -ms-flex-positive: $int;\n  flex-grow: $int; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Shrink\n//\n// The 'flex-shrink' property sets the flex shrink factor. Negative numbers\n// are invalid.\n//\n// Default: 1\n//\n// http://w3.org/tr/css3-flexbox/#flex-shrink-property\n\n@mixin flex-shrink($int: 1) {\n  -webkit-flex-shrink: $int;\n  -moz-flex-shrink: $int;\n  -ms-flex-negative: $int;\n  flex-shrink: $int; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Basis\n//\n// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.\n//\n// Values: Like \"width\"\n// Default: auto\n//\n// http://www.w3.org/TR/css3-flexbox/#flex-basis-property\n\n@mixin flex-basis($value: auto) {\n  -webkit-flex-basis: $value;\n  -moz-flex-basis: $value;\n  -ms-flex-preferred-size: $value;\n  flex-basis: $value; }\n\n//----------------------------------------------------------------------\n\n// Flexbox \"Flex\" (shorthand)\n//\n// The 'flex' property specifies the components of a flexible length: the\n// flex grow factor and flex shrink factor, and the flex basis. When an\n// element is a flex item, 'flex' is consulted instead of the main size\n// property to determine the main size of the element. If an element is\n// not a flex item, 'flex' has no effect.\n//\n// Values: none | <flex-grow> <flex-shrink> || <flex-basis>\n// Default: See individual properties (1 1 0).\n//\n// http://w3.org/tr/css3-flexbox/#flex-property\n\n@mixin flex($fg: 1, $fs: null, $fb: null) {\n  // Set a variable to be used by box-flex properties\n  $fg-boxflex: $fg;\n\n  // Box-Flex only supports a flex-grow value so let's grab the\n  // first item in the list and just return that.\n  @if type-of($fg) == \"list\" {\n    $fg-boxflex: nth($fg, 1); }\n\n  -webkit-box-flex: $fg-boxflex;\n  -webkit-flex: $fg $fs $fb;\n  -moz-box-flex: $fg-boxflex;\n  -moz-flex: $fg $fs $fb;\n  -ms-flex: $fg $fs $fb;\n  flex: $fg $fs $fb; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Justify Content\n//\n// The 'justify-content' property aligns flex items along the main axis\n// of the current line of the flex container. This is done after any flexible\n// lengths and any auto margins have been resolved. Typically it helps distribute\n// extra free space leftover when either all the flex items on a line are\n// inflexible, or are flexible but have reached their maximum size. It also\n// exerts some control over the alignment of items when they overflow the line.\n//\n// Note: 'space-*' values not supported in older syntaxes.\n//\n// Values: flex-start | flex-end | center | space-between | space-around\n// Default: flex-start\n//\n// http://w3.org/tr/css3-flexbox/#justify-content-property\n\n@mixin justify-content($value: flex-start) {\n  @if $value == flex-start {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start; }\n  @else if $value == flex-end {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end; }\n  @else if $value == space-between {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify; }\n  @else if $value == space-around {\n    -ms-flex-pack: distribute; }\n  @else {\n    -webkit-box-pack: $value;\n    -ms-flex-pack: $value; }\n\n  -webkit-justify-content: $value;\n  -moz-justify-content: $value;\n  justify-content: $value; }\n\n// Shorter version:\n@mixin flex-just($args...) {\n  @include justify-content($args...); }\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Items\n//\n// Flex items can be aligned in the cross axis of the current line of the\n// flex container, similar to 'justify-content' but in the perpendicular\n// direction. 'align-items' sets the default alignment for all of the flex\n// container's items, including anonymous flex items. 'align-self' allows\n// this default alignment to be overridden for individual flex items. (For\n// anonymous flex items, 'align-self' always matches the value of 'align-items'\n// on their associated flex container.)\n//\n// Values: flex-start | flex-end | center | baseline | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-items-property\n\n@mixin align-items($value: stretch) {\n  @if $value == flex-start {\n    -webkit-box-align: start;\n    -ms-flex-align: start; }\n  @else if $value == flex-end {\n    -webkit-box-align: end;\n    -ms-flex-align: end; }\n  @else {\n    -webkit-box-align: $value;\n    -ms-flex-align: $value; }\n\n  -webkit-align-items: $value;\n  -moz-align-items: $value;\n  align-items: $value; }\n\n//----------------------------------\n\n// Flexbox Align Self\n//\n// Values: auto | flex-start | flex-end | center | baseline | stretch\n// Default: auto\n\n@mixin align-self($value: auto) {\n  // No Webkit Box Fallback.\n  -webkit-align-self: $value;\n  -moz-align-self: $value;\n\n  @if $value == flex-start {\n    -ms-flex-item-align: start; }\n  @else if $value == flex-end {\n    -ms-flex-item-align: end; }\n  @else {\n    -ms-flex-item-align: $value; }\n\n  align-self: $value; }\n\n//----------------------------------------------------------------------\n\n// Flexbox Align Content\n//\n// The 'align-content' property aligns a flex container's lines within the\n// flex container when there is extra space in the cross-axis, similar to\n// how 'justify-content' aligns individual items within the main-axis. Note,\n// this property has no effect when the flexbox has only a single line.\n//\n// Values: flex-start | flex-end | center | space-between | space-around | stretch\n// Default: stretch\n//\n// http://w3.org/tr/css3-flexbox/#align-content-property\n\n@mixin align-content($value: stretch) {\n  // No Webkit Box Fallback.\n  -webkit-align-content: $value;\n  -moz-align-content: $value;\n\n  @if $value == flex-start {\n    -ms-flex-line-pack: start; }\n  @else if $value == flex-end {\n    -ms-flex-line-pack: end; }\n  @else {\n    -ms-flex-line-pack: $value; }\n\n  align-content: $value; }\n","// ARROW PROPERTIES\n@mixin arrow($direction: up, $color: currentColor, $width: 1rem, $height: $width / 2) {\n  @if not index(\"up\" \"up-right\" \"right\" \"down-right\" \"down\" \"down-left\" \"left\" \"up-left\", $direction) {\n    @error \"Direction must be `up`, `up-right`, `right`, `down-right`, \" + \"`down`, `down-left`, `left` or `up-left`.\"; }\n  @else if not _is-color($color) {\n    @error \"`#{$color}` is not a valid color for the `$color` argument in \" + \"the `triangle` mixin.\"; }\n  @else {\n    border-style: solid;\n    height: 0;\n    width: 0;\n\n    @if $direction == \"up\" {\n      border-color: transparent transparent $color;\n      border-width: 0 ($width / 2) $height; }\n    @else if $direction == \"up-right\" {\n      border-color: transparent $color transparent transparent;\n      border-width: 0 $width $width 0; }\n    @else if $direction == \"right\" {\n      border-color: transparent transparent transparent $color;\n      border-width: ($height / 2) 0 ($height / 2) $width; }\n    @else if $direction == \"down-right\" {\n      border-color: transparent transparent $color;\n      border-width: 0 0 $width $width; }\n    @else if $direction == \"down\" {\n      border-color: $color transparent transparent;\n      border-width: $height ($width / 2) 0; }\n    @else if $direction == \"down-left\" {\n      border-color: transparent transparent transparent $color;\n      border-width: $width 0 0 $width; }\n    @else if $direction == \"left\" {\n      border-color: transparent $color transparent transparent;\n      border-width: ($height / 2) $width ($height / 2) 0; }\n    @else if $direction == \"up-left\" {\n      border-color: $color transparent transparent;\n      border-width: $width $width 0 0; } } }\n","// IMAGE\n// SVG background images with PNG and retina fallback\n$image-path: '../img' !default;\n$fallback-extension: 'png' !default;\n$retina-suffix: '@2x';\n@mixin background-image($name, $size:false) {\n    background-image: url(#{$image-path}/#{$name}.svg);\n    @if($size) {\n        background-size: $size; }\n    &.no-svg {\n        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});\n        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {\n          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension}); } } }\n\n\n","// BEFORE AFTER PROPERTIES\n\n@mixin before($con:'', $values: '100% 100%', $type: null) {\n\t&:before {\n\t\t@if ($con) {\n\t\t\tcontent: $con; }\n\t\t@else {\n\t\t\tcontent: ''; }\n\t\t@if ($type) {\n\t\t\tdisplay: $type; }\n\t\t@else {\n\t\t\tdisplay: block; }\n\t\t@if length($values) == 2 {\n\t\t\twidth: im-rep(#{nth($values, 1)});\n\t\t\theight: im-rep(#{nth($values, 2)}); } } }\n\n@mixin after($con:'', $values: '100% 100%', $type: null) {\n\t&:after {\n\t\t@if ($con) {\n\t\t\tcontent: $con; }\n\t\t@else {\n\t\t\tcontent: ''; }\n\t\t@if ($type) {\n\t\t\tdisplay: $type; }\n\t\t@else {\n\t\t\tdisplay: block; }\n\t\t@if length($values) == 2 {\n\t\t\twidth: im-rep(#{nth($values, 1)});\n\t\t\theight: im-rep(#{nth($values, 2)}); } } }\n","@function make-elegant-shadow($base-color: #767676, $scale-factor: 2, $repeat: 30) {\n  $scale: 100% / $repeat / 2.2;\n  //color divider\n  $base-shadow: 1px;\n  $shadow: (#{$base-shadow} - #{$base-shadow}) 0 #{$base-color};\n\n  @for $i from 1 through $repeat {\n    $shadow: #{$shadow}, (-#{$i * $base-shadow}) #{$i * $base-shadow * $scale-factor} #{$base-shadow} #{lighten($base-color, $scale * $i)}; }\n\n  @return $shadow; }\n\n@mixin elegant-shadow-generator($base-color, $scale-factor, $repeat) {\n  text-shadow: make-elegant-shadow($base-color, $scale-factor, $repeat); }\n\n@mixin gettext-shadow($co) {\n  $shadow-color: $co;\n  $offset-y: 1.1px;\n  $offset-x: -1px;\n  $opacity-steps: 0.005;\n  $color-steps: 2.2%;\n\n  // max 100/30\n  $str: null;\n\n  @for $i from 1 through 30 {\n    $str: if($i == 1, $str, $str unquote(\",\"));\n    $str: $str ($i * $offset-x) ($i * $offset-y) rgba(lighten($shadow-color, $i * $color-steps), (30 - $i) * $opacity-steps); }\n\n  text-shadow: $str; }\n\n\n","///\n/// Margin settings.\n///\n\n@mixin mar($values...) {\n  @include bn-property(margin, false, $values...); }\n@mixin m($values...) {\n  @include bn-property(margin, false, $values...); }\n@mixin margin($values...) {\n  @include bn-property(margin, false, $values...); }\n\n///\n/// Padding settings.\n///\n\n@mixin p($values...) {\n  @include bn-property(padding, false, $values...); }\n@mixin pad($values...) {\n  @include bn-property(padding, false, $values...); }\n@mixin padding($values...) {\n  @include bn-property(padding, false, $values...); }\n","///\n/// Border settings.\n///\n\n@mixin bor($pos: null, $type: null, $values...) {\n  @include bn-setborder(border, $pos, $type, $values...); }\n@mixin border($pos: null, $type: null, $values...) {\n  @include bn-setborder(border, $pos, $type, $values...); }\n","///\n/// Border Radius settings.\n///\n\n@mixin bor-rad($values...) {\n  @include bn-border-radius(border, radius, $values...); }\n@mixin border-radius($values...) {\n  @include bn-border-radius(border, radius, $values...); }\n","///\n/// Position settings.\n///\n\n@mixin pos($pos: null, $values...) {\n  @include bn-setposition(position, $pos, $values...); }\n@mixin position($pos: null, $values...) {\n  @include bn-setposition(position, $pos, $values...); }\n","// COLORS\n$bn-colors: (main: #795d9c,link: #607d8b,hover: #ec8b00 ,bg: #2F3242,basic: #e5e5e5,info: #2d7091,success: #659f13,warning: #e28327,danger: #d85030,border: #dfdfdf,turquoise: #1abc9c,green-sea: #16a085,emerald: #2ecc71,nephritis: #27ae60,peter-river: #3498db,belize-hole: #2980b9,amethyst: #9b59b6,wisteria: #8e44ad,wet-ashpalt: #34495e,midnight-blue: #2c3e50,sun-flower: #f1c40f,orange: #f39c12,carrot: #e67e22,pumpkin: #d35400,alizarin: #e74c3c,pomegranate: #c0392b,clouds: #ecf0f1,silver: #bdc3c7,concrete: #95a5a6,asbestos: #7f8c8d,brown: #666666,brown-black: #333333,white: #fff,black: #000);\n\n// FONTS\n$font-stack-helvetica: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n$font-stack-lucida-grande: \"Lucida Grande\", \"Lucida Sans Unicode\", \"Geneva\", \"Verdana\", sans-serif;\n$font-stack-verdana: \"Verdana\", \"Geneva\", sans-serif;\n$font-stack-system: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n$font-stack-garamond: \"Garamond\", \"Baskerville\", \"Baskerville Old Face\", \"Hoefler Text\", \"Times New Roman\", serif;\n$font-stack-georgia: \"Georgia\", \"Times\", \"Times New Roman\", serif;\n$font-stack-hoefler-text: \"Hoefler Text\", \"Baskerville Old Face\", \"Garamond\", \"Times New Roman\", serif;\n$font-stack-consolas: \"Consolas\", \"monaco\", monospace;\n$font-stack-courier-new: \"Courier New\", \"Courier\", \"Lucida Sans Typewriter\", \"Lucida Typewriter\", monospace;\n$font-stack-monaco: \"monaco\", \"Consolas\", \"Lucida Console\", monospace;\n\n// INPUT\n$bn-inputs-list: (\"[type='color']\",\"[type='date']\",\"[type='datetime']\",\"[type='datetime-local']\",\"[type='email']\",\"[type='month']\",\"[type='number']\",\"[type='password']\",\"[type='search']\",\"[type='tel']\",\"[type='text']\",\"[type='time']\",\"[type='url']\",\"[type='week']\",\"input:not([type])\",\"textarea\");\n$all-input: bn-inputs($bn-inputs-list);\n$all-input-active: bn-inputs($bn-inputs-list, active);\n$all-input-focus: bn-inputs($bn-inputs-list, focus);\n$all-input-hover: bn-inputs($bn-inputs-list, hover);\n$all-input-invalid: bn-inputs($bn-inputs-list, invalid);\n\n// BUTTON\n$bn-buttons-list: (\"button\",\"[type='button']\",\"[type='reset']\",\"[type='submit']\");\n$all-button: bn-inputs($bn-buttons-list);\n$all-button-active: bn-inputs($bn-buttons-list, active);\n$all-button-focus: bn-inputs($bn-buttons-list, focus);\n$all-button-hover: bn-inputs($bn-buttons-list, hover);\n\n","// COLORS\n$main: #64778a;\n$sen: #2196f3;\n$link: #24deac;\n$hover: #ec8b00;\n$bg: #e1e3e4;\n$border: #bfc1c2;\n$basic: #e5e5e5;\n$info: #2d7091;\n$success: #659f13;\n$warning: #e28327;\n$danger: #d85030;\n// Secondary\n$tquoise: #1abc9c;\n$green-sea: #16a085;\n$emerald: #2ecc71;\n$nephritis: #27ae60;\n$peter-river: #3498db;\n$belize-hole: #2980b9;\n$amethyst: #9b59b6;\n$wisteria: #8e44ad;\n$wet-ashpalt: #34495e;\n$midnight-blue: #2c3e50;\n$sun-flower: #f1c40f;\n$dangerorange: #f39c12;\n$carrot: #e67e22;\n$pumpkin: #d35400;\n$alizarin: #e74c3c;\n$pomegranate: #c0392b;\n$clouds: #ecf0f1;\n$silver: #bdc3c7;\n$concrete: #95a5a6;\n$asbestos: #7f8c8d;\n$brown: #666666;\n$brown-black: #333333;\n$whites: #ffffff;\n$blacks: #000000;\n","\nhtml, body {\n\tfont-family: 'Roboto', sans-serif;\n\tfont-size: 14px;\n\theight: 100%;\n\twidth: 100%; }\n\n","@media print {\n\t.container {\n\t\twidth: auto; } }\n","section.slider ul.bx-slider > li, section.utility ul.bx-slider > li {\n\tline-height: 0; }\n","","","body {\n\tfont-family: Roboto; }\n"],"names":[],"mappings":"AqCCA,AAAA,IAAI,EAAE,IAAI,CAAC;EACV,WAAW,EAAE,oBAAoB;EACjC,SAAS,EAAE,IAAI;EACf,MAAM,EAAE,IAAI;EACZ,KAAK,EAAE,IAAI,GAAG;;ACLf,MAAM,CAAC,KAAK;EACX,AAAA,UAAU,CAAC;IACV,KAAK,EAAE,IAAI,GAAG;;ACFhB,AAAA,OAAO,AAAA,OAAO,CAAC,EAAE,AAAA,UAAU,GAAG,EAAE,EAAE,OAAO,AAAA,QAAQ,CAAC,EAAE,AAAA,UAAU,GAAG,EAAE,CAAC;EACnE,WAAW,EAAE,CAAC,GAAG;;AGDlB,AAAA,IAAI,CAAC;EACJ,WAAW,EAAE,MAAM,GAAG"}